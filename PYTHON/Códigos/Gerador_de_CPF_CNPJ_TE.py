<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Gerador_de_CPF_CNPJ_TE.htm</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="generator" content="SynEdit HTML exporter" />
<style type="text/css">
<!--
body { color: #000000; background-color: #000000; }
.cpp1-assembler { color: #0000FF; font-weight: bold; }
.cpp1-character { color: #FFFFFF; font-weight: bold; }
.cpp1-comment { color: #D4D0C8; font-style: italic; }
.cpp1-float { color: #800080; font-weight: bold; }
.cpp1-hexadecimal { color: #800080; font-weight: bold; }
.cpp1-identifier { color: #00FF00; font-weight: bold; }
.cpp1-illegalchar { color: #000000; font-weight: bold; }
.cpp1-number { color: #FF0000; font-weight: bold; }
.cpp1-octal { color: #800080; font-weight: bold; }
.cpp1-preprocessor { color: #00FF00; font-weight: bold; }
.cpp1-reservedword { color: #FF00FF; font-weight: bold; }
.cpp1-space { background-color: #000000; color: #FF0000; font-weight: bold; }
.cpp1-string { color: #FFFFFF; font-weight: bold; }
.cpp1-symbol { color: #FFFF00; font-weight: bold; }
-->
</style>
</head>
<body>
<pre>
<code><span style="font: 10pt Courier New;"><span class="cpp1-preprocessor">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#include&lt;conio.h&gt;
main</span><span class="cpp1-symbol">()
{</span><span class="cpp1-space">   
   </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">opcao</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">   </span><span class="cpp1-reservedword">char</span><span class="cpp1-space"> </span><span class="cpp1-identifier">resp</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">inicio</span><span class="cpp1-symbol">:
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">fflush</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">stdin</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">system</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;cls&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|____ GERADOR DE NUMEROS DE CPF, CNPJ E TITULO ELEITORAL V. 1.0 ___|\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|                                                                  |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Autor: Thiago C. Serrilho                                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     E-mail: webserrilho@gmail.com                                |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     3o. Semestre - Licenciatura em Computacao                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Disciplina: Linguagem de Programacao I                       |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Prof. Carlos Acacio                                          |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*-----------------------------*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|      Menu de opcoes         |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*-----------------------------*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;| 1 - Gerar numeros de CPF    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;| 2 - Gerar Numeros de CNPJ   |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;| 3 - Gerar Numeros de TE     |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;| 4 - Finalizar programa      |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*-----------------------------*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">   </span><span class="cpp1-reservedword">do
</span><span class="cpp1-space">   </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">      </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">++;
</span><span class="cpp1-space">      </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">)
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Erro: Opcao invalida!\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">      </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Informe a sua opcao: &quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">      </span><span class="cpp1-identifier">scanf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,&amp;</span><span class="cpp1-identifier">opcao</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-identifier">fflush</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">stdin</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-symbol">}</span><span class="cpp1-reservedword">while</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">opcao</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">4 </span><span class="cpp1-symbol">||</span><span class="cpp1-space"> </span><span class="cpp1-identifier">opcao</span><span class="cpp1-symbol">&lt;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">   </span><span class="cpp1-reservedword">switch</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">opcao</span><span class="cpp1-symbol">)
</span><span class="cpp1-space">   </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">      </span><span class="cpp1-reservedword">case</span><span class="cpp1-space"> 1</span><span class="cpp1-symbol">:
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">system</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;cls&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">],</span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">cpf</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte5</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|________________ GERADOR DE NUMEROS DE CPF V. 1.0 ________________|\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|                                                                  |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Autor: Thiago C. Serrilho                                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     E-mail: webserrilho@gmail.com                                |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     3o. Semestre - Licenciatura em Computacao                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Disciplina: Linguagem de Programacao I                       |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Prof. Carlos Acacio                                          |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Deseja gerar quantos numeros de CPF: &quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">scanf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,&amp;</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//|        Gera&ccedil;&atilde;o dos numeros do CPF        |
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">cpf</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">cpf</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">cpf</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-space"> 9</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">               </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">do
</span><span class="cpp1-space">               </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">                  </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">)
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">                     </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Numero invalido.\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">                     </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">                  </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">9</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">                  </span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">++;
</span><span class="cpp1-space">               </span><span class="cpp1-symbol">}</span><span class="cpp1-reservedword">while</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]&gt;</span><span class="cpp1-number">9 </span><span class="cpp1-symbol">||</span><span class="cpp1-space"> </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]&lt;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">);</span><span class="cpp1-space">     
            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Primeiro digito veridicador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">10</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">8</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=(</span><span class="cpp1-number">11 </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|        Segundo digito veridicador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">11</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">10</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">8</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte5</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte5</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=(</span><span class="cpp1-number">11 </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Impressao do numero completo       | 
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-number">9</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">               </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]);
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">-</span><span class="cpp1-number">1</span><span class="cpp1-symbol">==</span><span class="cpp1-number">2</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;.&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">-</span><span class="cpp1-number">1</span><span class="cpp1-symbol">==</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;.&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;-%d%d\n&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-comment">//dois &uacute;ltimos digitos
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Pressione \&quot;enter\&quot; para continuar...&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">break</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">      </span><span class="cpp1-reservedword">case</span><span class="cpp1-space"> 2</span><span class="cpp1-symbol">:
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">system</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;cls&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">12</span><span class="cpp1-symbol">],</span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">erro</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">cnpj</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte5</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|________________ GERADOR DE NUMEROS DE CNPJ V. 1.0 _______________|\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|                                                                  |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Autor: Thiago C. Serrilho                                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     E-mail: webserrilho@gmail.com                                |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     3o. Semestre - Licenciatura em Computacao                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Disciplina: Linguagem de Programacao I                       |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Prof. Carlos Acacio                                          |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Deseja gerar quantos numeros de CNPJ: &quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">scanf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,&amp;</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//|       Gera&ccedil;&atilde;o dos numeros do CNPJ        |
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">cnpj</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">cnpj</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">cnpj</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-number">8</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">               </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">9</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">]=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">11</span><span class="cpp1-symbol">]=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">12</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">9</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Primeiro digito veridicador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">8</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">11</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">12</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=(</span><span class="cpp1-number">11 </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|        Segundo digito veridicador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">8</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">11</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">12</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte5</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte5</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte6</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=(</span><span class="cpp1-number">11 </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte7</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Impressao do numero completo       | 
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-number">12</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">               </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]);</span><span class="cpp1-comment">//numeros do CNPJ
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">==</span><span class="cpp1-number">2</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;.&quot;</span><span class="cpp1-symbol">);</span><span class="cpp1-comment">//imprime um ponto depois da 2&ordf; casa
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">==</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;.&quot;</span><span class="cpp1-symbol">);</span><span class="cpp1-comment">//imprime um ponto depois da 5&ordf; casa
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">==</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;/&quot;</span><span class="cpp1-symbol">);</span><span class="cpp1-comment">//imprime uma barra depois da 8&ordf; casa
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;-%d%d\n&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-comment">// dois &uacute;ltimos digitos
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Pressione \&quot;enter\&quot; para continuar...&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">break</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">      </span><span class="cpp1-reservedword">case</span><span class="cpp1-space"> 3</span><span class="cpp1-symbol">:
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">system</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;cls&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">],</span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">te</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">int</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">parte4</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|__________ GERADOR DE NUMEROS DE TITULO ELEITORAL V. 1.0 _________|\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|                                                                  |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Autor: Thiago C. Serrilho                                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     E-mail: webserrilho@gmail.com                                |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     3o. Semestre - Licenciatura em Computacao                    |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Disciplina: Linguagem de Programacao I                       |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;|     Prof. Carlos Acacio                                          |\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;*==================================================================*\n\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Deseja gerar quantos numeros de TE: &quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">scanf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,&amp;</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;============================================\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//|        Gera&ccedil;&atilde;o dos numeros do TE         |
</span><span class="cpp1-space">         </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">te</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">te</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-identifier">quant</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">te</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-number">8</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">                 </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">9</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">                 </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">2</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">                 </span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">]=</span><span class="cpp1-identifier">rand</span><span class="cpp1-symbol">()%</span><span class="cpp1-number">8</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Primeiro digito veridicador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma1</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">2</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">3</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">5</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">6</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">8</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte1</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma1</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte2</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*=========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Segundo digito verificador        |
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*=========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">soma2</span><span class="cpp1-symbol">=((</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">9</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">7</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-number">10</span><span class="cpp1-symbol">]*</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)+
</span><span class="cpp1-space">                  </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">*</span><span class="cpp1-number">9</span><span class="cpp1-symbol">));
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte3</span><span class="cpp1-symbol">=</span><span class="cpp1-reservedword">int</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">/</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">parte4</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">parte3</span><span class="cpp1-space"> </span><span class="cpp1-symbol">*</span><span class="cpp1-space"> 11</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=(</span><span class="cpp1-identifier">soma2</span><span class="cpp1-space"> </span><span class="cpp1-symbol">-</span><span class="cpp1-space"> </span><span class="cpp1-identifier">parte4</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-number">9</span><span class="cpp1-symbol">)</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">=</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//|       Impressao do numero completo       | 
</span><span class="cpp1-space">            </span><span class="cpp1-comment">//*==========================================*
</span><span class="cpp1-space">            </span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">=</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">&lt;=</span><span class="cpp1-number">10</span><span class="cpp1-symbol">;</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">++)
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">               </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">numero</span><span class="cpp1-symbol">[</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">]);
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">==</span><span class="cpp1-number">4</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot; &quot;</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-comment">//imprime um espa&ccedil;o apos a 4&ordf; casa
</span><span class="cpp1-space">               </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">i</span><span class="cpp1-symbol">==</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot; &quot;</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-comment">//imprime um espa&ccedil;o apos a 8&ordf; casa
</span><span class="cpp1-space">            </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%d%d\n&quot;</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig1</span><span class="cpp1-symbol">,</span><span class="cpp1-identifier">dig2</span><span class="cpp1-symbol">);</span><span class="cpp1-space"> </span><span class="cpp1-comment">//dois &uacute;ltimos digitos
</span><span class="cpp1-space">            </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;============================================\n&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Pressione \&quot;enter\&quot; para continuar...&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">getchar</span><span class="cpp1-symbol">();
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">break</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">      </span><span class="cpp1-reservedword">case</span><span class="cpp1-space"> 4</span><span class="cpp1-symbol">:
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">{
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">printf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;Deseja continuar no programa (s/n)? &quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-identifier">scanf</span><span class="cpp1-symbol">(</span><span class="cpp1-string">&quot;%s&quot;</span><span class="cpp1-symbol">,&amp;</span><span class="cpp1-identifier">resp</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">((</span><span class="cpp1-identifier">resp</span><span class="cpp1-symbol">==</span><span class="cpp1-character">'n'</span><span class="cpp1-symbol">)</span><span class="cpp1-space"> </span><span class="cpp1-symbol">||</span><span class="cpp1-space"> </span><span class="cpp1-symbol">(</span><span class="cpp1-identifier">resp</span><span class="cpp1-symbol">==</span><span class="cpp1-character">'N'</span><span class="cpp1-symbol">))</span><span class="cpp1-space"> </span><span class="cpp1-reservedword">goto</span><span class="cpp1-space"> </span><span class="cpp1-identifier">fim</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">         </span><span class="cpp1-reservedword">else</span><span class="cpp1-space"> </span><span class="cpp1-reservedword">goto</span><span class="cpp1-space"> </span><span class="cpp1-identifier">inicio</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">      </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">   </span><span class="cpp1-symbol">}
</span><span class="cpp1-space">   </span><span class="cpp1-reservedword">goto</span><span class="cpp1-space"> </span><span class="cpp1-identifier">inicio</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">   </span><span class="cpp1-identifier">fim</span><span class="cpp1-symbol">:;
}

</span></span>
</code></pre>
</body>
</html>